{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Line}from'react-chartjs-2';import{fetchPreprocessedData}from'./api';// Import the correct function\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function DataVisualization(){const[chartData,setChartData]=useState({});const[loading,setLoading]=useState(true);useEffect(()=>{const fetchData=async()=>{try{// Fetch the latest preprocessed data\nconst response=await fetch('/api/preprocess',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({filename:'latest'})// Assuming 'latest' is a placeholder for the actual latest file name\n});if(!response.ok)throw new Error('Data fetch failed');const data=await response.json();setChartData({labels:data.labels,datasets:[{label:'Dataset',data:data.values,fill:false,borderColor:'rgb(75, 192, 192)',tension:0.1}]});setLoading(false);}catch(error){console.error('Error fetching data:',error);setLoading(false);}};fetchData();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"DataVisualization\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"section-title\",children:\"Data Visualization\"}),loading?/*#__PURE__*/_jsx(\"p\",{children:\"Loading data...\"}):Object.keys(chartData).length?/*#__PURE__*/_jsx(Line,{data:chartData}):/*#__PURE__*/_jsx(\"p\",{children:\"No data available for visualization. Please upload and preprocess data.\"})]});}export default DataVisualization;","map":{"version":3,"names":["React","useState","useEffect","Line","fetchPreprocessedData","jsx","_jsx","jsxs","_jsxs","DataVisualization","chartData","setChartData","loading","setLoading","fetchData","response","fetch","method","headers","body","JSON","stringify","filename","ok","Error","data","json","labels","datasets","label","values","fill","borderColor","tension","error","console","className","children","Object","keys","length"],"sources":["C:/Users/Vuyo/Desktop/Computer Science/Final Project/no_code_deep_learning_web_app/src/components/DataVisualization.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { fetchPreprocessedData } from './api'; // Import the correct function\n\nfunction DataVisualization() {\n    const [chartData, setChartData] = useState({});\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Fetch the latest preprocessed data\n                const response = await fetch('/api/preprocess', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ filename: 'latest' }) // Assuming 'latest' is a placeholder for the actual latest file name\n                });\n\n                if (!response.ok) throw new Error('Data fetch failed');\n\n                const data = await response.json();\n                setChartData({\n                    labels: data.labels,\n                    datasets: [{\n                        label: 'Dataset',\n                        data: data.values,\n                        fill: false,\n                        borderColor: 'rgb(75, 192, 192)',\n                        tension: 0.1\n                    }]\n                });\n                setLoading(false);\n            } catch (error) {\n                console.error('Error fetching data:', error);\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <div className=\"DataVisualization\">\n            <div className=\"section-title\">Data Visualization</div>\n            {loading ? (\n                <p>Loading data...</p>\n            ) : Object.keys(chartData).length ? (\n                <Line data={chartData} />\n            ) : (\n                <p>No data available for visualization. Please upload and preprocess data.</p>\n            )}\n        </div>\n    );\n}\n\nexport default DataVisualization;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,IAAI,KAAQ,iBAAiB,CACtC,OAASC,qBAAqB,KAAQ,OAAO,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE/C,QAAS,CAAAC,iBAAiBA,CAAA,CAAG,CACzB,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC9C,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAY,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC1B,GAAI,CACA;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iBAAiB,CAAE,CAC5CC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEC,QAAQ,CAAE,QAAS,CAAC,CAAE;AACjD,CAAC,CAAC,CAEF,GAAI,CAACP,QAAQ,CAACQ,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,mBAAmB,CAAC,CAEtD,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAClCf,YAAY,CAAC,CACTgB,MAAM,CAAEF,IAAI,CAACE,MAAM,CACnBC,QAAQ,CAAE,CAAC,CACPC,KAAK,CAAE,SAAS,CAChBJ,IAAI,CAAEA,IAAI,CAACK,MAAM,CACjBC,IAAI,CAAE,KAAK,CACXC,WAAW,CAAE,mBAAmB,CAChCC,OAAO,CAAE,GACb,CAAC,CACL,CAAC,CAAC,CACFpB,UAAU,CAAC,KAAK,CAAC,CACrB,CAAE,MAAOqB,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5CrB,UAAU,CAAC,KAAK,CAAC,CACrB,CACJ,CAAC,CAEDC,SAAS,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,mBACIN,KAAA,QAAK4B,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAC9B/B,IAAA,QAAK8B,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,oBAAkB,CAAK,CAAC,CACtDzB,OAAO,cACJN,IAAA,MAAA+B,QAAA,CAAG,iBAAe,CAAG,CAAC,CACtBC,MAAM,CAACC,IAAI,CAAC7B,SAAS,CAAC,CAAC8B,MAAM,cAC7BlC,IAAA,CAACH,IAAI,EAACsB,IAAI,CAAEf,SAAU,CAAE,CAAC,cAEzBJ,IAAA,MAAA+B,QAAA,CAAG,yEAAuE,CAAG,CAChF,EACA,CAAC,CAEd,CAEA,cAAe,CAAA5B,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}