{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vuyo\\\\Desktop\\\\Computer Science\\\\Final Project\\\\no_code_deep_learning_web_app\\\\src\\\\components\\\\DataVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { getVisualizationData, getColumns } from './api';\nimport '../styles/App.css';\n\n// Register the required chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nfunction generateRandomColor() {\n  const r = Math.floor(Math.random() * 255);\n  const g = Math.floor(Math.random() * 255);\n  const b = Math.floor(Math.random() * 255);\n  return `rgba(${r}, ${g}, ${b}, 0.5)`;\n}\nfunction DataVisualization({\n  dataUploaded\n}) {\n  _s();\n  const [columns, setColumns] = useState([]);\n  const [selectedColumn, setSelectedColumn] = useState('');\n  const [chartData, setChartData] = useState({});\n  const [error, setError] = useState('');\n  useEffect(() => {\n    if (dataUploaded) {\n      getColumns().then(cols => {\n        if (cols.length > 0) {\n          setColumns(cols);\n          setSelectedColumn(cols[0]);\n        } else {\n          setError('No columns available for visualization.');\n        }\n      }).catch(error => {\n        console.error('Error fetching column names:', error);\n        setError('Error fetching column names.');\n      });\n    }\n  }, [dataUploaded]);\n  useEffect(() => {\n    if (selectedColumn) {\n      getVisualizationData(selectedColumn).then(data => {\n        const backgroundColors = data.labels.map(() => generateRandomColor());\n        const borderColor = backgroundColors.map(color => color.replace('0.5', '1'));\n        setChartData({\n          labels: data.labels,\n          datasets: [{\n            label: selectedColumn,\n            data: data.values,\n            backgroundColor: backgroundColors,\n            borderColor: borderColor,\n            borderWidth: 1\n          }]\n        });\n      }).catch(error => {\n        console.error('Error fetching visualization data:', error);\n        setError('Error fetching visualization data.');\n      });\n    }\n  }, [selectedColumn]);\n  const handleChange = event => {\n    setSelectedColumn(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DataVisualization\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section-title\",\n      children: \"Data Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), !dataUploaded ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please upload a data file to visualize.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"data-dropdown\",\n        onChange: handleChange,\n        value: selectedColumn,\n        children: columns.map(label => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: label,\n          children: label\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), chartData.labels && chartData.labels.length > 0 && /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 73\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(DataVisualization, \"dKQcoE1m2ihwFYQswgN9mVEPMpw=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useState","useEffect","Bar","Chart","registerables","getVisualizationData","getColumns","jsxDEV","_jsxDEV","Fragment","_Fragment","register","generateRandomColor","r","Math","floor","random","g","b","DataVisualization","dataUploaded","_s","columns","setColumns","selectedColumn","setSelectedColumn","chartData","setChartData","error","setError","then","cols","length","catch","console","data","backgroundColors","labels","map","borderColor","color","replace","datasets","label","values","backgroundColor","borderWidth","handleChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Vuyo/Desktop/Computer Science/Final Project/no_code_deep_learning_web_app/src/components/DataVisualization.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { getVisualizationData, getColumns } from './api';\nimport '../styles/App.css';\n\n// Register the required chart.js components\nChart.register(...registerables);\n\nfunction generateRandomColor() {\n    const r = Math.floor(Math.random() * 255);\n    const g = Math.floor(Math.random() * 255);\n    const b = Math.floor(Math.random() * 255);\n    return `rgba(${r}, ${g}, ${b}, 0.5)`;\n}\n\nfunction DataVisualization({ dataUploaded }) {\n    const [columns, setColumns] = useState([]);\n    const [selectedColumn, setSelectedColumn] = useState('');\n    const [chartData, setChartData] = useState({});\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        if (dataUploaded) {\n            getColumns().then(cols => {\n                if (cols.length > 0) {\n                    setColumns(cols);\n                    setSelectedColumn(cols[0]);\n                } else {\n                    setError('No columns available for visualization.');\n                }\n            }).catch(error => {\n                console.error('Error fetching column names:', error);\n                setError('Error fetching column names.');\n            });\n        }\n    }, [dataUploaded]);\n\n    useEffect(() => {\n        if (selectedColumn) {\n            getVisualizationData(selectedColumn).then(data => {\n                const backgroundColors = data.labels.map(() => generateRandomColor());\n                const borderColor = backgroundColors.map(color => color.replace('0.5', '1'));\n                setChartData({\n                    labels: data.labels,\n                    datasets: [{\n                        label: selectedColumn,\n                        data: data.values,\n                        backgroundColor: backgroundColors,\n                        borderColor: borderColor,\n                        borderWidth: 1\n                    }]\n                });\n            }).catch(error => {\n                console.error('Error fetching visualization data:', error);\n                setError('Error fetching visualization data.');\n            });\n        }\n    }, [selectedColumn]);\n\n    const handleChange = (event) => {\n        setSelectedColumn(event.target.value);\n    };\n\n    return (\n        <div className=\"DataVisualization\">\n            <h2 className=\"section-title\">Data Visualization</h2>\n            {!dataUploaded ? (\n                <p>Please upload a data file to visualize.</p>\n            ) : error ? (\n                <p>{error}</p>\n            ) : (\n                <>\n                    <select className=\"data-dropdown\" onChange={handleChange} value={selectedColumn}>\n                        {columns.map(label => (\n                            <option key={label} value={label}>{label}</option>\n                        ))}\n                    </select>\n                    {chartData.labels && chartData.labels.length > 0 && <Bar data={chartData} />}\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default DataVisualization;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}