{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vuyo\\\\Desktop\\\\Computer Science\\\\Final Project\\\\no_code_deep_learning_web_app\\\\src\\\\components\\\\GPT3Insights.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GPT3Insights() {\n  _s();\n  const [insights, setInsights] = useState('');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchInsights = async () => {\n      setLoading(true);\n      try {\n        // Replace 'dataIdentifier' with an appropriate identifier for the data\n        // you want insights on. This could be a filename, an ID, etc.\n        const response = await fetch('/api/gpt3-insights', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            dataIdentifier: 'your-data-identifier'\n          })\n        });\n        if (!response.ok) throw new Error('Failed to fetch insights');\n        const data = await response.json();\n        setInsights(data.insights);\n      } catch (error) {\n        console.error('Error fetching GPT-3 insights:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchInsights();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"GPT3Insights\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Insights from GPT-3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading insights...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this) : insights ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: insights\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No insights available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(GPT3Insights, \"xdoyvxxqunewwp4w5wUqGILWQxM=\");\n_c = GPT3Insights;\nexport default GPT3Insights;\nvar _c;\n$RefreshReg$(_c, \"GPT3Insights\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GPT3Insights","_s","insights","setInsights","loading","setLoading","fetchInsights","response","fetch","method","headers","body","JSON","stringify","dataIdentifier","ok","Error","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Vuyo/Desktop/Computer Science/Final Project/no_code_deep_learning_web_app/src/components/GPT3Insights.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction GPT3Insights() {\n    const [insights, setInsights] = useState('');\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchInsights = async () => {\n            setLoading(true);\n            try {\n                // Replace 'dataIdentifier' with an appropriate identifier for the data\n                // you want insights on. This could be a filename, an ID, etc.\n                const response = await fetch('/api/gpt3-insights', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ dataIdentifier: 'your-data-identifier' })\n                });\n\n                if (!response.ok) throw new Error('Failed to fetch insights');\n\n                const data = await response.json();\n                setInsights(data.insights);\n            } catch (error) {\n                console.error('Error fetching GPT-3 insights:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchInsights();\n    }, []);\n\n    return (\n        <div className=\"GPT3Insights\">\n            <h2>Insights from GPT-3</h2>\n            {loading ? (\n                <p>Loading insights...</p>\n            ) : insights ? (\n                <p>{insights}</p>\n            ) : (\n                <p>No insights available.</p>\n            )}\n        </div>\n    );\n}\n\nexport default GPT3Insights;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,MAAMS,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9BD,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACA;QACA;QACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;UAC/CC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,cAAc,EAAE;UAAuB,CAAC;QACnE,CAAC,CAAC;QAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAE7D,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QAClCf,WAAW,CAACc,IAAI,CAACf,QAAQ,CAAC;MAC9B,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAC1D,CAAC,SAAS;QACNd,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDC,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIP,OAAA;IAAKsB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBACzBvB,OAAA;MAAAuB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC3BtB,OAAO,gBACJL,OAAA;MAAAuB,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAC1BxB,QAAQ,gBACRH,OAAA;MAAAuB,QAAA,EAAIpB;IAAQ;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAEjB3B,OAAA;MAAAuB,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC/B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACzB,EAAA,CA1CQD,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AA4CrB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}